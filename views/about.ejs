<!DOCTYPE html>
<html>
<meta charset="utf-8">
  <head>
    <link rel='stylesheet' href='/stylesheets/phone_style.css'/>
    <link rel='stylesheet' href='/stylesheets/computer_style.css'/>
  </head>
<body>
  <div class='nav'>
    <h1><a href="/">CENTAUR</a></h1>
    <ul class='nav-links'>
      <li><a href="/">Home</a></li>
      <li><a href="/ride">Dashboard</a></li>
      <li><a href="/about">About</a></li>
    </ul>
  </div>
  <div class='about'>
    <p>Centaur is a student project created by myself, Leah Petersen during my time at Ada Developers Academy in Seattle. My initial goal was to create a device to record the movement of my horse, Lola, during training sessions. I initially experimented with a Raspberry Pi and MPU-6500 accelerometer/gyroscope to gather data from Lola moving during her training.</p>
    <figure>
      <img src="/images/pi.jpg">
      <figcaption>First version of hardware, raspberry pi and MPU-6500 accelerometer/gyroscope</figcaption>
    </figure>
    <p>My initial goal was to process the data and find a way to automatically detect what “gait” Lola was in. Horses have three natural gaits, walking (a four beat gait), trotting (a two beat gait) and cantering (a three beat gait).</p>
    <iframe width="400" height="315" src="https://www.youtube.com/embed/_V10vBkvDTE" frameborder="0" allowfullscreen></iframe>
    <p>The first pass at trying to process the data and recognize these gaits resulted in a custom algorithm, which recognized the patterns in the limited data from one device and one horse. I wanted the next iteration of the project to be a more flexible solution – possibly for any horse and any device.  I wrote a front-end app to gather data from my cell phone and posted it to a server after each session. This hardware solution was less cumbersome and allows anyone with a smart phone to use the app.</p>
    <figure>
      <img src="/images/phonesaddle.jpg">
      <figcaption>Secord version of hardware, andriod phone.</figcaption>
    </figure>
    <p>As for the data processing, machine learning was a possible answer and the first algorithm I tried was k-means clustering, which sorted the walk, trot and canter ‘clusters’ well but only when the “k” (in this case 3) was manually provided. I wanted an answer that required less manual supervising and finally found the k-nearest neighbor algorithm. This algorithm trains a model with several ‘features’ from the data, in this case I provided features that I felt clearly highlighted the differences between my three gaits.</p>
    <figure>
      <img src="/images/predict.jpg">
      <figcaption>Example of KNN algorithm model predicting walk (red), trot (green) and canter (blue).</figcaption>
    </figure>
    <p>I chose a “supervised” approach to training my model meaning I manually labeled data that I knew was walk, trot or canter.  After training my model and tweaking my algorithm my app can take in unlabeled raw data and predict what sections are walk, trot or canter with good accuracy. Currently my app allows riders to record a riding session, save them in their records and process the data to get total time riding, total time in each gait and see a graph of the overall balance of their acceleration.</p>
    <p>Moving forward I plan to continue making my machine-learning model more precise and flexible. I want to add more quantifiers like line straightness, balance of horses movements and lameness detection.</p>
    <p>Technologies used for this project were Python, Scipy, SKlearn (a python machine learning library), javascript, nodejs, html and css. I batch processed my raw data with a bash script and used Google App Engine and Docker to deploy.</p>
  </div>

  <script src="//d3js.org/d3.v3.min.js"></script>
    <div class='graph'>
      <script>
        var margin = {top: 20, right: 20, bottom: 30, left: 50},
            width = 500 - margin.left - margin.right,
            height = 200 - margin.top - margin.bottom;

        var x = d3.scale.linear()
            .range([0, width]);

        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left");

        var line = d3.svg.line()    
            .x(function(d) { return x(d.secs); })
            .y(function(d) { return y(d.accel); })
            .interpolate("basis");

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.tsv("scaleminmax.tsv", type, function(error, data) {
          console.log(data)
          if (error) throw error;

          x.domain(d3.extent(data, function(d) { return d.secs; }));
          y.domain(d3.extent(data, function(d) { return d.accel; }));

          svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + height + ")")
              .call(xAxis);

          svg.append("g")
              .attr("class", "y axis")
              .call(yAxis);
            // .append("text")
            //   .attr("transform", "rotate(-90)")
            //   .attr("y", 6)
            //   .attr("dy", ".71em")
            //   .style("text-anchor", "end")
            //   .text("Acceleration");

          svg.append("path")
              .datum(data)
              .attr("class", "line")
              .attr("d", line)
              .attr('stroke', function(d) { return d.label; });
        });

        function type(d) {
          d.secs = +d.secs;
          d.accel = +d.accel;
          return d;
        }
      </script>
    </div>
  </body>
</html>
